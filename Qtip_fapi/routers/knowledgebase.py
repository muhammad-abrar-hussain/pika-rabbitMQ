"""
This module defines API endpoints for managing knowledge base data in the QTip application.

Includes:
1. Retrieval of file paths associated with a specific presentation ID.
2. Creation of new AI-generated topics with details like presenter ID, presentation ID, title, summary, and OpenAI request completion ID.

Schemas:
- `AiGeneratedTopicCreate`: Defines the structure for creating a new AI-generated topic.

Endpoints:
- `GET /knowledgebase/{presentation_id}`: Retrieves file paths for a given presentation ID.
- `POST /knowledgebase/ai-response`: Adds a new AI-generated topic to the knowledge base.
"""

from fastapi import APIRouter, HTTPException
from Qtip_fapi.database import database
from pydantic import BaseModel, UUID4

router = APIRouter()


@router.get("/knowledgebase/{presentation_id}")
async def get_files_by_presentation(presentation_id: str):
    """API endpoint to retrieve file paths associated.

    with a given presentation ID from the knowledge base.
    """
    try:
        query = """
        SELECT filepath
        FROM QTip_Api_presentationknowledgebase
        WHERE presentation_id = REPLACE(:presentation_id, '-', '')
        """
        rows = await database.fetch_all(query,
                                        {"presentation_id": presentation_id})
        if not rows:
            raise HTTPException(status_code=404,
                                detail="No files found for the given presentation ID."
                                )

        files = [dict(row) for row in rows]
        return {"files": files}

    except Exception:
        raise HTTPException(status_code=500, detail="Internal Server Error")


class AiGeneratedTopicCreate(BaseModel):
    """Schema for creating a new AI-generated topic.

        Attributes:

            presenter_id (UUID4): The unique identifier of the presenter.

            presentation_id (UUID4): The unique identifier of the presentation.

            title (str): The title of the topic generated by AI.

            summary (str): A brief summary of the topic.

            open_ai_request_completion_id (str): The unique identifier for the OpenAI request completion.
        """

    presenter_id: UUID4
    presentation_id: UUID4
    title: str
    summary: str
    open_ai_request_completion_id: str


@router.post("/knowledgebase/ai-response")
async def ai_response(topic: AiGeneratedTopicCreate):
    """API endpoint to create a new AI-generated topic in the knowledge base,

    including details like presenter ID, presentation ID, title, summary,

    and OpenAI request completion ID
    """
    try:
        query = """
                    INSERT INTO QTip_Api_aigeneratedtopic
                    (uuid, presenter_id, presentation_id, title, summary, open_ai_request_completion_id)
                    VALUES (
                        REPLACE(UUID(), '-', ''),
                        REPLACE(:presenter_id, '-', ''),
                        REPLACE(:presentation_id, '-', ''),
                        :title,
                        :summary,
                        :open_ai_request_completion_id
                    )
                """
        values = {
            "presenter_id": str(topic.presenter_id),
            "presentation_id": str(topic.presentation_id),
            "title": topic.title,
            "summary": topic.summary,
            "open_ai_request_completion_id": topic.open_ai_request_completion_id,
        }
        await database.execute(query=query, values=values)

        return {"message": "AI-generated topic successfully created."}

    except Exception as e:
        print(f"Error occurred: {e}")
        raise HTTPException(status_code=500, detail="Failed to create AI-generated topic.")
